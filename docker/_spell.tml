import (
	"context"
	"errors"
	{{ range (intsToString (attrs "Imports")) }}
		{{ if notequal . ""}}{{quote .}}{{end}}
	{{end}}

	"github.com/influx6/faux/ops"
	"github.com/influx6/faux/context"
	"github.com/docker/docker/api/types"
	"github.com/docker/docker/api/types/image"
	"github.com/influx6/moz/gen/filesystem"
	"github.com/moby/moby/client"
)

// {{sel "Name"}} returns a new {{sel "Name"}}Op instance to be executed on the client.
func (d *DockerCaster) {{sel "Name"}}({{if lenNotEqual (attrs "arguments") 0 }} {{ joinInterface (attrs "arguments") ", " }} {{end}}) (*{{sel "Name"}}Op, error) {
	var spell {{sel "Name"}}Op
	{{ range (attrs "arguments") }}
	{{ $parts := (split . " ") }}
	{{if lenNotEqual $parts 0 }}
		spell.{{ nthOf $parts 0 }} = {{ nthOf $parts 0 }}
	{{end}}
	{{end}}

	return &spell, nil
}

{{ $argString := intsToString (attrs "arguments") }}
{{ $varNames := doCutSplit $argString " " 0 }}
{{ $varTypes := doCutSplit $argString " " 1 }}
{{ $args := join (doPrefix $varNames "cm.") ", " }}
{{ $retString := doTimesPrefix (lenOf (attrs "return")) "ret"}}
{{ $rets := join $retString "," }}

// {{sel "Name"}}Options defines a function type to modify internal fields of the {{sel "Name"}}Op.
type {{sel "Name"}}Options func(*{{sel "Name"}}Op)

// {{sel "Name"}}ResponseCallback defines a function type for {{sel "Name"}}Op response.
type {{sel "Name"}}ResponseCallback func({{if lenNotEqual (attrs "return") 0 }} {{ joinInterface (attrs "return") ", " }} {{end}}) error

// {{sel "Name"}}Op defines a structure which implements the Op interface
// for executing of docker based commands for {{sel "Name"}}.
type {{sel "Name"}}Op struct {
	client       *client.Client
	{{ range (attrs "arguments") }}
	{{.}}
	{{end}}
}

// Op returns a object implementing the ops.Op interface.
func (cm *{{sel "Name"}}Op) Op(callback {{sel "Name"}}ResponseCallback) ops.Op {
	return &once{{sel "Name"}}Op{spell: cm, callback: cb}
}

type once{{sel "Name"}}Op struct {
	callback {{sel "Name"}}ResponseCallback
	spell *{{sel "Name"}}Op
}

// Exec excutes the spell and adds the neccessary callback.
func (cm *once{{sel "Name"}}Op) Exec(ctx context.CancelContext) error {
	return cm.spell.Exec(ctx, cm.callback)
}

// Exec executes the image creation for the underline docker server pointed to.
func (cm *{{sel "Name"}}Op) Exec(ctx context.CancelContext, callback {{sel "Name"}}ResponseCallback) error {
	// Execute client {{sel "Name"}} method.
	{{ if lenNotEqual (attrs "return") 0 }} {{$rets}}, err := cm.client.{{sel "Name"}}({{$args}}) {{ else }} err := cm.client.{{sel "Name"}}({{$args}}) {{ end }}
	if err != nil {
		return err
	}

	if callback != nil {
		return callback({{ $rets }})
	}

	return nil
}
